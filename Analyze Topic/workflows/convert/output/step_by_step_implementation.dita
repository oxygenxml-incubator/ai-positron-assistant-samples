<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
    <task id="create_authentication_provider">
        <title>Create Your ApplicationAuthenticationProvider</title>
        <shortdesc>Create a class that implements `ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider`.</shortdesc>
        <taskbody>
            <context>
                <p>You need a class that implements <codeph>ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider</codeph>. This class will handle the authentication process using OIDC.</p>
            </context>
            <steps>
                <step>
                    <cmd>Create the class <codeph>OidcAuthenticationProvider</codeph></cmd>
                    <info>
                        <p>Implement the following methods:</p>
                        <codeblock>
import ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider;
import ro.sync.ecss.webapp.auth.ApplicationUser;
import ro.sync.ecss.webapp.auth.ApplicationUserStore;
// other imports...

public class OidcAuthenticationProvider implements ApplicationAuthenticationProvider {
  @Override
  public String getName() {
    // For example:
    return "OIDC Login";
  }

  @Override
  public String getIcon() {
    // Path to your icon (relative to your plugin's "resources" folder, typically):
    return "../plugin-resources/oidc/oidc-icon.png";
  }

  @Override
  public String getCallbackPath() {
    // The relative path from your plugin that handles the OIDC callback:
    // E.g., "../plugins-dispatcher/my-oidc-callback"
    return "../plugins-dispatcher/my-oidc";
  }

  @Override
  public URL prepareAuthenticationRedirect(String sessionId) {
    // Construct the OIDC Authorization URL: https://your-oidc-provider/authorize?
    //   client_id=...&amp;redirect_uri=...&amp;scope=...&amp;state=... etc.
    // Return a fully qualified URL object.
    return buildOidcAuthorizationUrl(sessionId);
  }

  @Override
  public boolean isAskingForAuthorization() {
    // Typically true for OIDC
    return true;
  }
}
                        </codeblock>
                    </info>
                </step>
            </steps>
            <result>
                <p>The <codeph>prepareAuthenticationRedirect</codeph> method must return a <codeph>java.net.URL</codeph> that points to your IdP's "authorize" endpoint.</p>
            </result>
        </taskbody>
    </task>

    <task id="create_callback_servlet">
        <title>Create a Servlet (Plugin Extension) for the Callback</title>
        <shortdesc>Define a servlet extension that extends `ServletPluginExtension` to handle the OIDC callback.</shortdesc>
        <taskbody>
            <steps>
                <step>
                    <cmd>Create the class <codeph>OidcCallbackServlet</codeph></cmd>
                    <info>
                        <p>Implement the following methods:</p>
                        <codeblock>
import ro.sync.ecss.extensions.api.webapp.plugin.servlet.ServletPluginExtension;
import ro.sync.ecss.extensions.api.webapp.plugin.servlet.http.HttpServletRequest;
import ro.sync.ecss.extensions.api.webapp.plugin.servlet.http.HttpServletResponse;

public class OidcCallbackServlet extends ServletPluginExtension {
  
  @Override
  public String getPath() {
    // Must match the path that your OidcAuthenticationProvider returns in getCallbackPath().
    return "my-oidc";
  }

  @Override
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    // 1. Extract parameters: "state", "code", etc.
    // 2. Compare "state" to what you stored in SessionStore.
    // 3. Exchange "code" for tokens on the IdP's token endpoint.
    // 4. Retrieve user information from the ID token or userinfo endpoint.
    // 5. Construct an ApplicationUser.
    // 6. Mark them as authenticated in Web Author.
  }
}
                        </codeblock>
                    </info>
                </step>
            </steps>
            <result>
                <p>The servlet will handle the OIDC callback, validate the state, exchange the code for tokens, and authenticate the user in Web Author.</p>
            </result>
        </taskbody>
    </task>

    <task id="store_temporary_state">
        <title>Storing Temporary State (SessionStore)</title>
        <shortdesc>Use `SessionStore` to store ephemeral data for a particular session.</shortdesc>
        <taskbody>
            <steps>
                <step>
                    <cmd>Use <codeph>SessionStore</codeph> to save, retrieve, and remove session data</cmd>
                    <info>
                        <codeblock>
import ro.sync.ecss.extensions.api.webapp.SessionStore;
// ...
SessionStore sessionStore = pluginWorkspace.getSessionStore();
String sessionId = request.getSession().getId();

// Save:
sessionStore.putWithoutSessionCookieRefresh(sessionId, "oidc.state", randomStateValue);

// Retrieve:
Object savedState = sessionStore.get(sessionId, "oidc.state");

// Remove after usage:
sessionStore.remove(sessionId, "oidc.state");
                        </codeblock>
                    </info>
                </step>
            </steps>
            <result>
                <p>Temporary state data is stored and managed per session, ensuring security and proper session handling.</p>
            </result>
        </taskbody>
    </task>

    <task id="plugin_registration">
        <title>Plugin Registration</title>
        <shortdesc>Declare your new classes in the plugin descriptor (`plugin.xml`).</shortdesc>
        <taskbody>
            <steps>
                <step>
                    <cmd>Register the <codeph>ApplicationAuthenticationProvider</codeph> and servlet in <codeph>plugin.xml</codeph></cmd>
                    <info>
                        <codeblock>
<extensions>
  <!-- Application Authentication Provider extension -->
  <extension type="com.oxygenxml.webapp.auth.provider">
    <class>com.example.oidc.OidcAuthenticationProvider</class>
  </extension>

  <!-- Servlet extension to handle the callback and other OIDC endpoints -->
  <extension type="com.oxygenxml.webapp.servlet">
    <class>com.example.oidc.OidcCallbackServlet</class>
  </extension>
</extensions>
                        </codeblock>
                    </info>
                </step>
            </steps>
            <result>
                <p>Web Author will discover your authentication provider and servlet, enabling OIDC login functionality.</p>
            </result>
        </taskbody>
    </task>
</dita>