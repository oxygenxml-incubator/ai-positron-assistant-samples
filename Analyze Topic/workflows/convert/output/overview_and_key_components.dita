<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <concept id="oidc-overview">
    <title>Overview and Key Components of OIDC</title>
    <shortdesc>OIDC is an identity layer built on top of OAuth 2.0, involving user redirection, token exchange, and session establishment.</shortdesc>
    <conbody>
      <p>OIDC is an identity layer built on top of OAuth 2.0. The flow typically involves:</p>
      <ol>
        <li>Redirecting the user to the Identity Provider (IdP) for login (along with a random <codeph>state</codeph> parameter).</li>
        <li>Handling a callback from the IdP that includes an authorization code (and the same <codeph>state</codeph>).</li>
        <li>Exchanging the authorization code for tokens (access token, ID token, possibly refresh token).</li>
        <li>Verifying the tokens, retrieving the user information, and establishing a session in Web Author.</li>
      </ol>
    </conbody>
  </concept>

  <concept id="web-author-implementation">
    <title>Implementation in Oxygen XML Web Author</title>
    <shortdesc>Steps to implement OIDC in Oxygen XML Web Author, including custom authentication provider and servlet handling.</shortdesc>
    <conbody>
      <p>On the <b>Oxygen XML Web Author</b> side, you will need to implement:</p>
      <ul>
        <li><b>A custom <codeph>ApplicationAuthenticationProvider</codeph></b>: This tells Web Author about your new authentication provider (your IdP name, icon, how to start the login, how to handle the callback, etc.).</li>
        <li><b>A servlet (or set of servlets) to handle OIDC request flows</b>: For example, a plugin extension that extends <codeph>ServletPluginExtension</codeph>, or uses a pattern similar to an "OAuth dispatcher," is typical.</li>
        <li><b>Use the <codeph>ApplicationUserStore</codeph></b> to register an authenticated user once you have retrieved and verified the user identity from the IdP.</li>
        <li><b>Use the <codeph>SessionStore</codeph></b> to persist transient state (like <codeph>state</codeph> or tokens) across the login flow.</li>
      </ul>
    </conbody>
  </concept>

  <concept id="core-api-classes">
    <title>Core API Classes and Interfaces</title>
    <shortdesc>Key classes and interfaces in the Web Author API for handling OIDC authentication.</shortdesc>
    <conbody>
      <p>Core API classes/interfaces you will work with and their roles:</p>
      <dl>
        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider</codeph></dt>
        <dd>
          <p><b>Purpose</b>: Represents an authentication method (e.g., "OIDC Login", "GitHub Login", etc.) recognized by Web Author.</p>
          <p><b>Key Methods</b>:</p>
          <ul>
            <li><codeph>String getName()</codeph> - Return the name (e.g., "OIDC").</li>
            <li><codeph>String getIcon()</codeph> - Return a relative path to an icon to be shown in the Web Author login UI.</li>
            <li><codeph>String getCallbackPath()</codeph> - Return the URL path that Web Author will open after the user completes authentication.</li>
            <li><codeph>URL prepareAuthenticationRedirect(String sessionId)</codeph> - Return where the user should be redirected to begin authentication, given the current session.</li>
            <li><codeph>boolean isAskingForAuthorization()</codeph> - Indicate if the user explicitly needs to grant access (often <codeph>true</codeph> for OAuth/OIDC flows).</li>
          </ul>
        </dd>
        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationAuthenticationManager</codeph></dt>
        <dd>
          <p><b>Purpose</b>: Coordinates all authentication providers and manages the overall Web Author login system.</p>
          <p><b>Usage</b>: From within your plugin code, you can retrieve the manager and notify it when a user is authenticated.</p>
        </dd>
        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationUser</codeph></dt>
        <dd>
          <p><b>Purpose</b>: A representation of an authenticated user inside Web Author. It includes an <codeph>id</codeph>, a <codeph>displayName</codeph>, an <codeph>email</codeph>, etc. You will construct this once you have determined the user's identity from OIDC tokens.</p>
        </dd>
        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationUserStore</codeph></dt>
        <dd>
          <p><b>Purpose</b>: Storage for the <codeph>ApplicationUser</codeph> objects once they are authenticated. The store manages linking an authenticated user to a particular session (identified by <codeph>sessionId</codeph>).</p>
        </dd>
        <dt><codeph>ro.sync.ecss.extensions.api.webapp.SessionStore</codeph></dt>
        <dd>
          <p><b>Purpose</b>: Per-session storage. Ideal for storing "state" values, tokens, or any short-lived data you need across requests.</p>
          <p><b>Usage</b>: You can put and get arbitrary objects keyed by <codeph>(sessionId, "someCustomKey")</codeph>.</p>
        </dd>
        <dt><codeph>ro.sync.ecss.extensions.api.webapp.plugin.servlet.ServletPluginExtension</codeph></dt>
        <dd>
          <p><b>Purpose</b>: Base class for implementing HTTP endpoints (servlets) in a plugin.</p>
          <p><b>Usage</b>: You typically override <codeph>doGet</codeph> / <codeph>doPost</codeph> methods to handle the OIDC callback, code exchange, token refresh, or any other OIDC actions.</p>
        </dd>
        <dt><codeph>ro.sync.ecss.extensions.api.webapp.plugin.servlet.http.HttpServletRequest</codeph> / <codeph>HttpServletResponse</codeph></dt>
        <dd>
          <p><b>Purpose</b>: The request/response objects you handle within your servlet extension.</p>
          <p><b>Usage</b>: Extract parameters (<codeph>state</codeph>, <codeph>code</codeph>, etc.), produce redirects, or generate responses.</p>
        </dd>
      </dl>
    </conbody>
  </concept>
</dita>