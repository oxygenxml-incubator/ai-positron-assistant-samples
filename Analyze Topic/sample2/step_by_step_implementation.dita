<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <task id="create-authentication-provider">
    <title>Create Your ApplicationAuthenticationProvider</title>
    <shortdesc>Create a class that implements the ApplicationAuthenticationProvider interface.</shortdesc>
    <taskbody>
      <context>
        <p>You need a class that implements <codeph>ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider</codeph>.</p>
      </context>
      <steps>
        <step>
          <cmd>Define the class</cmd>
          <info>
            <codeblock>
import ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider;
import ro.sync.ecss.webapp.auth.ApplicationUser;
import ro.sync.ecss.webapp.auth.ApplicationUserStore;
// other imports...

public class OidcAuthenticationProvider implements ApplicationAuthenticationProvider {
  @Override
  public String getName() {
    // For example:
    return "OIDC Login";
  }

  @Override
  public String getIcon() {
    // Path to your icon (relative to your plugin's "resources" folder, typically):
    return "../plugin-resources/oidc/oidc-icon.png";
  }

  @Override
  public String getCallbackPath() {
    // The relative path from your plugin that handles the OIDC callback:
    // E.g., "../plugins-dispatcher/my-oidc-callback"
    return "../plugins-dispatcher/my-oidc";
  }

  @Override
  public URL prepareAuthenticationRedirect(String sessionId) {
    // Construct the OIDC Authorization URL: https://your-oidc-provider/authorize?
    //   client_id=...&redirect_uri=...&scope=...&state=... etc.
    // Return a fully qualified URL object.
    return buildOidcAuthorizationUrl(sessionId);
  }

  @Override
  public boolean isAskingForAuthorization() {
    // Typically true for OIDC
    return true;
  }
}
            </codeblock>
          </info>
        </step>
        <step>
          <cmd>Ensure the prepareAuthenticationRedirect method returns a valid URL</cmd>
          <info>
            <p>The <codeph>prepareAuthenticationRedirect</codeph> method must return a <codeph>java.net.URL</codeph> that points to your IdPs authorize endpoint.</p>
          </info>
        </step>
        <step>
          <cmd>Generate and store a state parameter</cmd>
          <info>
            <p>Store the state parameter in a per-session location like <codeph>SessionStore</codeph> to protect from CSRF attacks.</p>
          </info>
        </step>
        <step>
          <cmd>Match the getCallbackPath method with your plugin servlet</cmd>
          <info>
            <p>The <codeph>getCallbackPath()</codeph> method should match the path of your actual plugin servlet that receives the callback.</p>
          </info>
        </step>
      </steps>
    </taskbody>
  </task>

  <task id="create-callback-servlet">
    <title>Create a Servlet (Plugin Extension) for the Callback</title>
    <shortdesc>Define a servlet extension that extends ServletPluginExtension to handle the OIDC callback.</shortdesc>
    <taskbody>
      <steps>
        <step>
          <cmd>Define the servlet class</cmd>
          <info>
            <codeblock>
import ro.sync.ecss.extensions.api.webapp.plugin.servlet.ServletPluginExtension;
import ro.sync.ecss.extensions.api.webapp.plugin.servlet.http.HttpServletRequest;
import ro.sync.ecss.extensions.api.webapp.plugin.servlet.http.HttpServletResponse;

public class OidcCallbackServlet extends ServletPluginExtension {
  
  @Override
  public String getPath() {
    // Must match the path that your OidcAuthenticationProvider returns in getCallbackPath().
    return "my-oidc";
  }

  @Override
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    // 1. Extract parameters: "state", "code", etc.
    // 2. Compare "state" to what you stored in SessionStore.
    // 3. Exchange "code" for tokens on the IdP's token endpoint.
    // 4. Retrieve user information from the ID token or userinfo endpoint.
    // 5. Construct an ApplicationUser.
    // 6. Mark them as authenticated in Web Author.
  }
}
            </codeblock>
          </info>
        </step>
        <step>
          <cmd>Validate the state parameter</cmd>
          <info>
            <p>Retrieve the saved state from <codeph>SessionStore</codeph> using <codeph>sessionId</codeph>. Compare it with <codeph>request.getParameter("state")</codeph>. If they differ, reject the request.</p>
          </info>
        </step>
        <step>
          <cmd>Exchange code for tokens</cmd>
          <info>
            <p>Perform an HTTP POST to your IdPs token endpoint to exchange the authorization code for tokens.</p>
          </info>
        </step>
        <step>
          <cmd>Parse user identity</cmd>
          <info>
            <p>Use the ID token or UserInfo endpoint to retrieve the users identity.</p>
          </info>
        </step>
        <step>
          <cmd>Authenticate with Web Author</cmd>
          <info>
            <p>Create an <codeph>ApplicationUser</codeph> and associate it with the session using <codeph>ApplicationUserStore</codeph>.</p>
          </info>
        </step>
        <step>
          <cmd>Redirect or close the session</cmd>
          <info>
            <p>Redirect to a page in Web Author or close the pop-up window as needed.</p>
          </info>
        </step>
      </steps>
    </taskbody>
  </task>

  <task id="store-temporary-state">
    <title>Storing Temporary State (SessionStore)</title>
    <shortdesc>Use SessionStore to store ephemeral data for a particular session.</shortdesc>
    <taskbody>
      <steps>
        <step>
          <cmd>Save data in SessionStore</cmd>
          <info>
            <codeblock>
import ro.sync.ecss.extensions.api.webapp.SessionStore;
// ...
SessionStore sessionStore = pluginWorkspace.getSessionStore();
String sessionId = request.getSession().getId();

// Save:
sessionStore.putWithoutSessionCookieRefresh(sessionId, "oidc.state", randomStateValue);
            </codeblock>
          </info>
        </step>
        <step>
          <cmd>Retrieve data from SessionStore</cmd>
          <info>
            <codeblock>
Object savedState = sessionStore.get(sessionId, "oidc.state");
            </codeblock>
          </info>
        </step>
        <step>
          <cmd>Remove data after usage</cmd>
          <info>
            <codeblock>
sessionStore.remove(sessionId, "oidc.state");
            </codeblock>
          </info>
        </step>
      </steps>
    </taskbody>
  </task>

  <task id="plugin-registration">
    <title>Plugin Registration</title>
    <shortdesc>Declare your new classes in the plugin descriptor.</shortdesc>
    <taskbody>
      <steps>
        <step>
          <cmd>Declare the ApplicationAuthenticationProvider and servlet in plugin.xml</cmd>
          <info>
            <codeblock>
<extensions>
  <!-- Application Authentication Provider extension -->
  <extension type="com.oxygenxml.webapp.auth.provider">
    <class>com.example.oidc.OidcAuthenticationProvider</class>
  </extension>

  <!-- Servlet extension to handle the callback and other OIDC endpoints -->
  <extension type="com.oxygenxml.webapp.servlet">
    <class>com.example.oidc.OidcCallbackServlet</class>
  </extension>
</extensions>
            </codeblock>
          </info>
        </step>
        <step>
          <cmd>Deploy your plugin</cmd>
          <info>
            <p>Ensure that Web Author discovers your authentication provider and servlet. The OIDC Login option will appear in the login UI.</p>
          </info>
        </step>
      </steps>
    </taskbody>
  </task>
</dita>
