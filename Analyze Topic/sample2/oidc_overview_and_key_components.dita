<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <concept id="oidc_overview">
    <title>Overview and Key Components of OIDC</title>
    <shortdesc>OIDC is an identity layer built on top of OAuth 2.0, involving user redirection, token exchange, and session establishment in Web Author.</shortdesc>
    <conbody>
      <p>OIDC (OpenID Connect) is an identity layer built on top of OAuth 2.0. The typical flow involves several key steps:</p>
      <ol>
        <li>Redirecting the user to the Identity Provider (IdP) for login, along with a random <codeph>state</codeph> parameter.</li>
        <li>Handling a callback from the IdP that includes an authorization code and the same <codeph>state</codeph>.</li>
        <li>Exchanging the authorization code for tokens, which may include an access token, ID token, and possibly a refresh token.</li>
        <li>Verifying the tokens, retrieving user information, and establishing a session in Web Author.</li>
      </ol>
      <p>On the <b>Oxygen XML Web Author</b> side, the implementation requires:</p>
      <ul>
        <li>A custom <codeph>ApplicationAuthenticationProvider</codeph> to inform Web Author about the new authentication provider, including the IdP name, icon, login initiation, and callback handling.</li>
        <li>A servlet or set of servlets to manage OIDC request flows, such as redirecting to the IdP and handling callbacks. This can be implemented as a plugin extension extending <codeph>ServletPluginExtension</codeph> or using a pattern similar to an OAuth dispatcher.</li>
        <li>Utilizing the <codeph>ApplicationUserStore</codeph> to register an authenticated user after verifying their identity from the IdP.</li>
        <li>Using the <codeph>SessionStore</codeph> to persist transient state, like <codeph>state</codeph> or tokens, across the login flow.</li>
      </ul>
    </conbody>
  </concept>

  <concept id="core_api_classes">
    <title>Core API Classes and Interfaces</title>
    <shortdesc>Key API classes and interfaces for implementing OIDC in Oxygen XML Web Author.</shortdesc>
    <conbody>
      <p>The following are the core API classes/interfaces involved in the OIDC implementation:</p>
      <dl>
        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationAuthenticationProvider</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Represents an authentication method recognized by Web Author.</p>
          <p><b>Key Methods:</b></p>
          <ul>
            <li><codeph>String getName()</codeph>  Returns the name (e.g., OIDC).</li>
            <li><codeph>String getIcon()</codeph>  Returns a relative path to an icon for the Web Author login UI.</li>
            <li><codeph>String getCallbackPath()</codeph>  Returns the URL path for Web Author to open after user authentication.</li>
            <li><codeph>URL prepareAuthenticationRedirect(String sessionId)</codeph>  Returns the redirect URL for authentication initiation.</li>
            <li><codeph>boolean isAskingForAuthorization()</codeph>  Indicates if explicit user authorization is required.</li>
          </ul>
        </dd>

        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationAuthenticationManager</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Coordinates all authentication providers and manages the Web Author login system.</p>
          <p><b>Usage:</b> Retrieve the manager within plugin code to notify it when a user is authenticated.</p>
        </dd>

        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationUser</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Represents an authenticated user in Web Author, including an <codeph>id</codeph>, <codeph>displayName</codeph>, and <codeph>email</codeph>.</p>
          <p><b>Usage:</b> Construct this object after determining the users identity from OIDC tokens.</p>
        </dd>

        <dt><codeph>ro.sync.ecss.webapp.auth.ApplicationUserStore</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Stores <codeph>ApplicationUser</codeph> objects once authenticated, linking them to a session identified by <codeph>sessionId</codeph>.</p>
        </dd>

        <dt><codeph>ro.sync.ecss.extensions.api.webapp.SessionStore</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Provides per-session storage for transient data like state values or tokens.</p>
          <p><b>Usage:</b> Store and retrieve arbitrary objects keyed by <codeph>(sessionId, "someCustomKey")</codeph>.</p>
        </dd>

        <dt><codeph>ro.sync.ecss.extensions.api.webapp.plugin.servlet.ServletPluginExtension</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Base class for implementing HTTP endpoints (servlets) in a plugin.</p>
          <p><b>Usage:</b> Override <codeph>doGet</codeph> / <codeph>doPost</codeph> methods to handle OIDC callbacks, code exchanges, token refreshes, or other OIDC actions.</p>
        </dd>

        <dt><codeph>ro.sync.ecss.extensions.api.webapp.plugin.servlet.http.HttpServletRequest</codeph> / <codeph>HttpServletResponse</codeph></dt>
        <dd>
          <p><b>Purpose:</b> Handle request/response objects within servlet extensions.</p>
          <p><b>Usage:</b> Extract parameters like <codeph>state</codeph> and <codeph>code</codeph>, produce redirects, or generate responses.</p>
        </dd>
      </dl>
    </conbody>
  </concept>
</dita>
